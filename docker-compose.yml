version: "3.7"

x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2022-09-07T22-25-02Z
  command: server --console-address ":9001" http://minio{1...2}/data{1...2}
  restart: unless-stopped
  expose:
    - 9000
    - 9001
  environment:
    - MINIO_ROOT_USER=${MINIO_USER}
    - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

services:
  mysql_service:
    image: mysql:8.0
    hostname: mysql_service
    restart: always
    volumes:
      - /developer/mysql:/var/lib/mysql
    ports:
      - 3306:3306
    expose:
      - 3306
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE_DEFAULT}
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping"]
      interval: 10s
      timeout: 2s
      retries: 10

  # adminer:
  #   image: adminer
  #   restart: always
  #   ports:
  #     - 8080:8080
  #   depends_on:
  #     - mysql_service
  #   links:
  #     - mysql_service

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer-data:/data

  redis_db_service:
    image: redis
    hostname: redis_db_service
    restart: always
    command: >
      --requirepass ${REDIS_PASSWORD}
    ports:
      - 6379:6379
    expose:
      - 6379
    container_name: redis_db_service

  timescaledb:
    hostname: timescaledb
    # image: timescale/pg_prometheus:latest-pg10
    image: timescale/timescaledb-ha:pg14-latest
    restart: always
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    command: postgres -c 'max_connections=250'
    volumes:
      - /developer/postgresql_data:/var/lib/postgresql/data:z
      - /developer/db_backups:/db_backups:z
    # ports:
    #   - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - localnetworks
  pgbouncer:
    image: docker.io/bitnami/pgbouncer:1
    ports:
      - 6432:6432
    environment:
      - POSTGRESQL_HOST=timescaledb
      - POSTGRESQL_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRES_DB}
    networks:
      - localnetworks

  # pgbouncer:
  #   image: edoburu/pgbouncer
  #   environment:
  #     - DB_USER=postgres
  #     - DB_PASSWORD=${POSTGRES_PASSWORD}
  #     - DB_HOST=timescaledb
  #     - DB_NAME=
  #     - POOL_MODE=transaction
  #     - ADMIN_USERS=postgres,dbuser
  #   ports:
  #     - "6432:5432"
  #   depends_on:
  #     - timescaledb

  # grafana:
  #   hostname: grafana
  #   image: grafana/grafana
  #   restart: always
  #   ports:
  #     - 3000:3000
  #   volumes:
  #     - grafana_data:/var/lib/grafana

  # prometheus:
  #   hostname: prometheus
  #   image: prom/prometheus
  #   restart: always
  #   ports:
  #     - 9090:9090
  #   volumes:
  #     - ./prometheus:/etc/prometheus:ro

  # prom_mysql_exporter:
  #   image: prom/mysqld-exporter
  #   restart: always
  #   links:
  #     - mysql_service
  #     - prometheus
  #   ports:
  #     - "9104:9104"
  #   environment:
  #     DATA_SOURCE_NAME: root:${MYSQL_ROOT_PASSWORD}@(mysql_service:3306)/

  # postgres-exporter:
  #   image: prometheuscommunity/postgres-exporter
  #   restart: always
  #   ports:
  #     - 9187:9187
  #   environment:
  #     DATA_SOURCE_NAME: "postgresql://postgres:${POSTGRES_PASSWORD}@timescaledb:5432/?sslmode=disable"
  #   links:
  #     - timescaledb
  #     - prometheus

  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  # minio3:
  #   <<: *minio-common
  #   hostname: minio3
  #   volumes:
  #     - data3-1:/data1
  #     - data3-2:/data2

  # minio4:
  #   <<: *minio-common
  #   hostname: minio4
  #   volumes:
  #     - data4-1:/data1
  #     - data4-2:/data2
  nginx:
    image: nginx:1.22.0-alpine
    hostname: nginx
    restart: unless-stopped
    environment:
      - MAIN_HOST=${MAIN_HOST}
    command: /bin/sh -c "envsubst < /etc/nginx/conf.d/nginx.temp > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon on;'"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled/portainer.conf:/etc/nginx/sites-enabled/portainer.conf:ro
      - ./nginx/nginx.tmp:/etc/nginx/conf.d/nginx.temp
    ports:
      - 80:80
      - 9000:9000
      - 9001:9001
    expose:
      - 80
    #   - 9000
    #   - 9001
    links:
      - minio1
      - minio2
      - portainer
      # - minio3
      # - minio4
    depends_on:
      - minio1
      - minio2
      - portainer
      # - minio3
      # - minio4

volumes:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  portainer-data:
  # data3-1:
  # data3-2:
  # data4-1:
  # data4-2:
  grafana_data: {}
  prometheus-data:
networks:
  localnetworks:
    driver: bridge
